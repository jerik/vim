*jk-scripting-help* *jerik*

Tipps fï¿½rs vim scripting. Zur bessren konfiguration.

Abbreviations												*jk-abbr* 
-----------------------------------------------------------------------------
Dynamische Ausgaben mittels abbreviations erzeugen. Das kann auf zwei wegen 
erfolgen: 

	iab Ydate1 <C-R>=strftime("%d.%m.%Y")<CR>				|<C-R>|
	iab Ydate2 <ESC>:.!date +\%Y<CR>
	iab <expr> heu strftime("=%Y%m%d")
	iab <expr> tom strftime("=%Y%m%d", localtime(  ) + ( 24*3600 ))
	iab <expr> nwe strftime("=%Y%m%d", localtime(  ) + ( 7*24*3600 ))
	inoremap <expr> today strftime( "=%Y%m%d", localtime() )
	inoremap <expr> tomorrow strftime( "=%Y%m%d", localtime() + (24 * 3600) )
	inoremap <expr> nextweek strftime( "=%Y%m%d", localtime() + (7 * 24 * 3600) )

Man kann auch Mappings auf eine abbreviation legen:

	imap <F11> <ESC>:.!date<CR>
	iab Ydate3 <F11>


Lokale Hilfe												*jk-local-help*
-----------------------------------------------------------------------------
Um die lokale hilfe in vim erreichbar zu machen, muss man nachfolgendes 
Kommando ausfï¿½hren. Dabei ist ~/.vim/doc das verzeichnis in dem ich den
Hilfetext erstellt habe. (Sollte defaultmï¿½ssig immer so sein)

	:helptags ~/.vim/doc								|add-local-help|


Funktion ausfï¿½hrbar machen									*jk-add-function*
-----------------------------------------------------------------------------
Um eine Funktion ausfï¿½hrbar zu machen ï¿½ber den Commandline-Modus, muss man
die Funktion mit |command| registrieren.

	function! Abc()
		.!echo "hallo welt"
	endfunction

	command Abc call Abc

Besitzt die Funktion paramater, sieht das wiefolgt aus.

	function! Xyz(sVar)
		let i = a:sVar
	endfunction
	
	command  -nargs=1 Xyz call Xyz("<args>")

Wobei -nargs=1 aufzeigt wieviel parameter angegeben werden mï¿½ssen. Sollen
parameter optional angegeben werden dann lautet mit '*', d.h. -nargs=*


Concat - Variablen und Strings verbinden  					*jk-concat*
-----------------------------------------------------------------------------
Um eine variable mit einem string zu verbinden muss man den string in 
Anführungszeichen setzen, und string mit varibale über den concatenator . 
verbinden

	let FILE=foo
	exec "source " . FILE


Execute the current File - 									*jk-execute*
-----------------------------------------------------------------------------
Um die Datei auszufï¿½hren die man gerade bearbeitet kann man nachfolgende
Kommandos in der .vimrc festlegen:

	autocmd FileType python map <F7> :!python %<CR>
	autocmd FileType sh map <F7> :!bash -c ./%<CR>

Damit wir beim drï¿½cken von <F7> der entsprechende interpreter mit der 
Datei ausgefï¿½hrt. ODER:

    nnoremap <F12> :!%:p<CR>

Siehe dazu auch ":help cmdline-special".
	

Vertikales Selektieren (Auswï¿½hlen)					*jk-vert-select*
-----------------------------------------------------------------------------
Um in einer Textdatei Vertikal zu selektieren benutzt man den shortcut

	STRG+V 

im normalen Modus


Keycodes - keycodes der Tasten									*jk-keycodes*
-----------------------------------------------------------------------------
Siehe |keycodes|


Verbose - anzeigen von Einstellungen in VIM  					*jk-verbose*
-----------------------------------------------------------------------------

	:verbose nmap ,t

Zeigt an in welcher Datei das Kommando definiert ist, bspw. 

	n  ,t            <Esc>:Todos<CR>:w<CR>
			Last set from ~/.vim/plugin/mygft.vim

Andere Mï¿½glichkeiten wï¿½ren: 
	:verbose filetype


Drucken - druckeinstellungen in Vim			  					*jk-print*
-----------------------------------------------------------------------------
Drucken ohne dateiname und seitenzahl

    :set popt=header:0 
    :help print-options, :help pheader 

Mehrere Option bei set werden mit Komma getrennt

    :set printoptions=paper:A4,portrait:n,wrap:y,syntax:y,duplex:long 
    ohne header, in landscape :set popt=header:0,portrait:n 



Suchen case (in-)sensitive 						  					*jk-search-case*
-----------------------------------------------------------------------------
Die Normale suche sucht case-sensitive. Will man case-insensitive suchen, dann 
mittels \c

	/\cfoobar 

hat man in der .vim konfigurationdatei folgenes angegeben

	set ignorecase

dann kann man mittels \C case-sensitive suchen 

Ich hab folgendes konfiguriert um die Suche zu switchen ( in der tweak datei )
Damit kann man mittels F9 live umschalten.

	nmap <F9> :set ignorecase! ignorecase?<CR>


Suchenpatter mit newline				  					*jk-search-newline*
-----------------------------------------------------------------------------
Patterns including end-of-lineEdit

The search /^abc finds abc at the beginning of a line, and /abc$ finds abc at the end of a line. 
However, in /abc^def and /abc$def the ^ and $ are just ordinary characters with no special meaning. 
By contrast, each of the following has a special meaning anywhere in a search pattern.

	\n 	a newline character (line ending)
	\_s 	a whitespace (space or tab) or newline character
	\_^ 	the beginning of a line (zero width)
	\_$ 	the end of a line (zero width)
	\_. 	any character including a newline 

see: http://vim.wikia.com/wiki/Search_across_multiple_lines


Suchen und löschen 						  					*jk-delete*
-----------------------------------------------------------------------------
Alle Zeilen lï¿½schen die NICHT das pattern (Muster) enthalten 

	:!g/pattern/d 
	:v/pattern/d

Alle Zeilen lï¿½schen die das pattern (Muster) enthalten 

	:g/pattern/d

Alle leere Zeilen lÃ¶schen
	:%s/^$\n//g
	
Alle linebreaks loeschen, d.h. eine einzige Zeile erstellen
	:%j

Alle tags lÃ¶schen, contnet bleibt erhalten
	:%s/<\_.\{-1,\}>//g
	
Suchen und kopieren (yank) 			  					*jk-yank* *jk-copy*
-----------------------------------------------------------------------------
Alle Zeilen in register "a kopieren, die das wort pattern enthalten 

	:global/pattern/yank A		# wichtig A nicht a
	:g/pattern/y A

:global findet alle vorkommen von pattern, danach kann man ex-operationen wie
yank ( y ) oder delete ( d ) ausfï¿½hren

Den kopierten Inhalt wieder einfï¿½gen: 
	
	"aP				Register a pasten

Mit :reg kann man sich die Inhalte der Register anschauen. :reg a zeigt nur
register a an 


Markieren von Text 						  					*jk-select*
-----------------------------------------------------------------------------
Alles mit und innerhalb von Klammern markieren. Dazu auf die start oder
end-klammmer navigieren und folgenden eingeben:

	v%			# bei ([{  
	y%			# kopiert sofort alles bei ([{  
	d%			# lï¿½scht alles bei ([{  
	c%			# lï¿½scht alles bei ([{ und geht in den insert mode

Alles innerhalb von Klammern markieren. Dazu muss man innerhalb der Klammer
sein: 	fï¿½r kopieren y, lï¿½schen d, lï¿½schen und insert mode c, anstelle von v

	vib 		# bei (
	viB			# bei [
	vit			# bei <tag>

Alles innnherhalb von Anfï¿½hrungszeichen markieren. Dazu muss man innerhalb der
Anfï¿½hrungzeichen sein: 	fï¿½r kopieren y ,lï¿½schen d, lï¿½schen und insert mode c 
anstelle von v

	vi"			# bei " ( doppeltes Gï¿½nsefï¿½sschen )
	vi'			# bei ' ( einfaches Gï¿½nsefï¿½sschen )


Spring innerhalb von Quellcode					*jk-select*
-----------------------------------------------------------------------------
Innerhlab vom Quellcode gibt es sprungfunktionen zum start/ende von Klammern
oder zum start einer Funktion:

	[[			springt zur Start der derzeitigen/vorherigen Funktion
	]]			springt zur Start der nachfolgenden Funktion
	[{			springt zur Start der { im derzeitigen Codeblock
	]}			springt zur Ende der } im derzeitigen Codeblock
	[(			springt zur Start der ( in der derzeitigen Funktion
	])			springt zur Ende der ) in der derzeitigen Funktion
	<S-5>		springt passenden schliessenden Klammer von der Position
	<S-6>		springt zum ersten Zeichen der Zeile

	y%			# kopiert sofort alles bei   
	d%			# lï¿½scht alles bei ([{  
	c%			# lï¿½scht alles bei ([{ und geht in den insert mode

Alles innerhalb von Klammern markieren. Dazu muss man innerhalb der Klammer

Normal commands in insert mode						 *jk-insert*
-----------------------------------------------------------------------------
Um ein commando im normal mode wï¿½hrend des insert modes auszufï¿½hren, kann man
mit <C-o> (Strg + o) kurz in den Modus reinwechseln. Nach ausfï¿½hren des
Kommandos ist man automatisch wieder im insert mode. 

Bspw. wenn man an der ersten Zeile was einfï¿½gen will

	<C-o>gg


Count lines												 *jk-count*
-----------------------------------------------------------------------------
Um markierte Zeilen zu zÃ¤hlen, und die darin enthaltenen WÃ¶rter: 

	g<C-g>


Replace in vertical visual selection						 *jk-visual-replace*
-----------------------------------------------------------------------------
Um in einer vertical visuelle selction zu ersetzen, verwendet man \%V. Bspw. 
	
	:'<,'>s/\%V{pat}/{sub}/g

Will man bei der selection unterschiedliche matches mit gleichen Inhalten ersetzten. 
Bspw: wenn 3 spalten selektiert sind und man 123 einfügen will, d.h. 1. Spalte = 1
2. Spalte = 2, 3. Spalte = 3

	:'<,'>s/\%V.../123/g


Replace things						 *jk-replace-things*
-----------------------------------------------------------------------------
Um die vorherige Suche im replace zu verwenden
	
	/foo
	:%s//{sub}/g

Replace nutzt die letzte suche für das search and replace. In diesem Fall "foo"

Replace nur auf bestätigung durchführen. Dann nutzt man die option c ( check). 
Damit erhält man bei jedem foo eine Frage was damit zu tun ist: y(es), n(o)

	%s/foo/bar/gc


Regex 										 *jk-regex*
-----------------------------------------------------------------------------
Verschiedene hilfreiche regex

	/<\&.*>			# findet alles was mit <> umschlossen ist: tags, emailadresse
	/foo\(bar\)\@!	# findet nur foo, nicht foobar. Negation mit \@!


Email formatieren										 *jk-email-format*
-----------------------------------------------------------------------------
Um text in ein 80 Spalte Email format zu bringen, d.h. lange Zeilen 
umbrechen zu lassen, geht man wiefolgt vor: 

	:set ft=mail
	gggqG		# gg springe an Zeile 1; gq formatiere; G bis zum Ende

Nur formatieren ist: gq


Code formatieren 										 *jk-code-format*
-----------------------------------------------------------------------------
Um den quellcode richtig einzuruecken: 

	:set ft=<codeart>  # bspw. javascript
	gg=G	# Formatiert die gesamt datei
	=%		# Formatiert eine Funktion wenn man auf den { ist

Nur formatieren ist: =<Motion>


Syntax re-hightlight 								 *jk-syntax-re-highlight*
-----------------------------------------------------------------------------
Wenn das Syntax Highlight im Buffer verloren geht:

	:syntax sync formstart


Register und Zugriff										 *jk-regsiter*
-----------------------------------------------------------------------------
Anzeigen was man alles in seinen Registern hat
	
	:registers

Folgenden interessate Register gibt es ( Auszug ):

	"" letzter yank
	"/ letze suche
	"% aktueller Dateiname
	"# vorheriger Buffer dateiname
	": letztes ex commando
	"* aktueller OS copy register
	". aktelles ausgeführter punkt-ding in vim

Zugriff auf die Register erhält man mit 
	<C-R>register

Beispielsweise paste der letzten suche
	<C-R>/

Beispielsweise paste des OS copy registers
	<C-R>*


Cursor magic										 *jk-cursor*
-----------------------------------------------------------------------------
Highlight cursor line

	:set cul "switch on
	:set cursorline 
	:set nocul "switch off
	:set nocursorline


Open Url										 *jk-open-url*
-----------------------------------------------------------------------------
Mit dem cursor auf einem URL sein und dann
	
	gx

eingeben. Daraufhin wird die URL im Standardbrowser aufgerufen

Nummer vor Zeilen erzeugen								 *jk-gen-numbers*
-----------------------------------------------------------------------------
Wenn man eine Liste von Nummer vor Zeilen braucht, geht das wiefolgt, nachdem
man die Zeilen markiert hat

	:'<,'>s/^\S/\=printf("%d.\t", line(".") - line("'<") + 1)

Will man nicht bei 1 Anfangen sondern bei 12, dann ersetzt man die +1 mit +12
Quelle: http://vim.wikia.com/wiki/Insert_line_numbers

Will man nur eine Liste erzeugen geht das mit 

	:put =range(2,12)

Quelle: http://vim.wikia.com/wiki/Making_a_list_of_numbers


  vim:tw=78:shiftwidth=4:tabstop=4:ft=help:norl:
